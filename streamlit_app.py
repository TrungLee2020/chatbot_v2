# streamlit_app.py - Updated for unified collection architecture with new logic

import streamlit as st
import requests
import uuid
import time
import json
import re
from datetime import datetime

# --- C·∫§U H√åNH ---
API_BASE_URL = "http://localhost:6868"  # Updated to match your app.py port

# Topic options for the unified system
TOPIC_OPTIONS = {
    "T·∫•t c·∫£ ch·ªß ƒë·ªÅ": None,  # No filter - search across all topics
    "TaÃÄi chiÃÅnh nh√¢n s∆∞Ã£": "tcns",
    "ƒê·∫ßu t∆∞ ph√°t tri·ªÉn": "dtpt",
    "Qu·∫£n l√Ω ch·∫•t l∆∞·ª£ng": "qlcl",
    "K·ªπ thu·∫≠t c√¥ng ngh·ªá": "ktcn",
    "Nghi√™n c·ª©u ph√°t tri·ªÉn": "ncpt",
    "Ki·ªÉm tra ph√°p ch·∫ø": "ktpc",
    "VƒÉn ph√≤ng TCT": "vptl",
    "Tem b∆∞u ch√≠nh": "temBC",
    "Trung t√¢m ƒë·ªëi so√°t": "ttds",
    "D·ªãch v·ª• kh√°ch h√†ng": "dvkh",
    "B∆∞u ƒëi√™Ã£n vƒÉn h√≥a x√£": "bd_vhx",
    "B∆∞u ch√≠nh chuy·ªÉn ph√°t (n·ªôi ƒë·ªãa)": "bccp_nd",
    "B∆∞u ch√≠nh chuy·ªÉn ph√°t (qu·ªëc t·∫ø)": "bccp_qt",
    "D·ªãch v·ª• h√†nh ch√≠nh c√¥ng": "hcc",
    "D·ªãch v·ª• ph√¢n ph·ªëi b√°n l·∫ª": "ppbl",
    "T√†i ch√≠nh b∆∞u ch√≠nh": "tcbc",
}

# --- KH·ªûI T·∫†O SESSION STATE ---
if 'session_id' not in st.session_state:
    st.session_state.session_id = str(uuid.uuid4())

if 'user_id' not in st.session_state:
    st.session_state.user_id = str(uuid.uuid4())

if 'chat_history' not in st.session_state:
    st.session_state.chat_history = []

if 'uploaded_docs' not in st.session_state:
    st.session_state.uploaded_docs = []

if 'selected_docs' not in st.session_state:
    st.session_state.selected_docs = []

if 'use_uploaded_files' not in st.session_state:
    st.session_state.use_uploaded_files = False

if 'selected_topic' not in st.session_state:
    st.session_state.selected_topic = "T·∫•t c·∫£ ch·ªß ƒë·ªÅ"

if 'show_retrieval_details' not in st.session_state:
    st.session_state.show_retrieval_details = False

# --- HELPER FUNCTIONS ---
def format_date_string(date_str):
    """Parse various date string formats and return 'dd-mm-YYYY'."""
    if not date_str or not isinstance(date_str, str) or "N/A" in date_str:
        return None
    try:
        # T√°ch ph·∫ßn ng√†y ra kh·ªèi ph·∫ßn th·ªùi gian n·∫øu c√≥ (v√≠ d·ª•: '2021-06-01 00:00:00')
        date_part = date_str.split(' ')[0]
        # C√°c ƒë·ªãnh d·∫°ng c√≥ th·ªÉ g·∫∑p
        for fmt in ("%Y-%m-%d", "%d/%m/%Y", "%m/%d/%Y"):
            try:
                dt_obj = datetime.strptime(date_part, fmt)
                return dt_obj.strftime('%d-%m-%Y')
            except ValueError:
                continue
    except Exception:
        return None # Tr·∫£ v·ªÅ None n·∫øu c√≥ l·ªói
    return None

def refresh_documents():
    """C·∫≠p nh·∫≠t danh s√°ch t√†i li·ªáu t·ª´ server"""
    try:
        response = requests.get(f"{API_BASE_URL}/documents/{st.session_state.session_id}")
        if response.status_code == 200:
            st.session_state.uploaded_docs = response.json().get("documents", [])
        else:
            st.error(f"L·ªói l·∫•y danh s√°ch t√†i li·ªáu: {response.text}")
    except Exception as e:
        st.error(f"L·ªói k·∫øt n·ªëi: {e}")

def get_document_status(doc_id):
    """L·∫•y tr·∫°ng th√°i chi ti·∫øt c·ªßa m·ªôt t√†i li·ªáu"""
    try:
        response = requests.get(f"{API_BASE_URL}/document-status/{st.session_state.session_id}/{doc_id}")
        if response.status_code == 200:
            return response.json()
        return None
    except Exception:
        return None

def send_chat_request(user_message, topic_filter=None):
    """G·ª≠i y√™u c·∫ßu chat ƒë·∫øn API v·ªõi topic filter"""
    # Chu·∫©n b·ªã chat history cho API
    chat_history_for_api = []
    for msg in st.session_state.chat_history[-8:]:  # L·∫•y 4 c·∫∑p g·∫ßn nh·∫•t
        if msg["role"] == "user":
            chat_history_for_api.append({
                "human": msg["content"],
                "chatbot": ""
            })
        elif msg["role"] == "assistant" and chat_history_for_api:
            chat_history_for_api[-1]["chatbot"] = msg["content"]

    # Remove incomplete pairs
    chat_history_for_api = [item for item in chat_history_for_api if item["chatbot"]]

    payload = {
        "user_id": st.session_state.user_id,
        "session_id": st.session_state.session_id,
        "transaction_id": str(uuid.uuid4()),
        "user_message": user_message,
        "chat_history": chat_history_for_api,
        "topic": topic_filter if topic_filter is not None else ""
    }

    try:
        response = requests.post(f"{API_BASE_URL}/chat", json=payload, timeout=120)
        return response
    except Exception as e:
        return None

# --- GIAO DI·ªÜN CH√çNH ---
st.set_page_config(page_title="VNPOST Chatbot", layout="wide")
st.title("ü§ñ VNPOST ASSISTANT - Unified Search")
st.caption(f"Session ID: {st.session_state.session_id}")

# Refresh danh s√°ch t√†i li·ªáu khi load page
if st.session_state.uploaded_docs:
    refresh_documents()

# --- SIDEBAR: QU·∫¢N L√ù T√ÄI LI·ªÜU V√Ä C·∫§U H√åNH ---
with st.sidebar:
    st.header("üìÇ Qu·∫£n l√Ω T√†i li·ªáu")

    # Upload file section (gi·ªØ nguy√™n logic c≈© n·∫øu c√≥)
    st.subheader("üÜï T·∫£i l√™n t√†i li·ªáu m·ªõi")
    uploaded_file = st.file_uploader(
        "Ch·ªçn t√†i li·ªáu (PDF, DOCX, MD, TXT)",
        type=['pdf', 'docx', 'md', 'txt'],
        key="file_uploader"
    )

    if uploaded_file is not None:
        if st.button("üöÄ X·ª≠ l√Ω t√†i li·ªáu", key="process_file"):
            with st.spinner(f"ƒêang x·ª≠ l√Ω `{uploaded_file.name}`..."):
                try:
                    files = {'file': (uploaded_file.name, uploaded_file.getvalue(), uploaded_file.type)}
                    response = requests.post(
                        f"{API_BASE_URL}/upload",
                        data={'session_id': st.session_state.session_id},
                        files=files,
                        timeout=300
                    )
                    if response.status_code == 200:
                        result = response.json()
                        st.success(f"‚úÖ ƒê√£ x·ª≠ l√Ω: {result['filename']}")
                        refresh_documents()
                        st.rerun()
                    else:
                        st.error(f"‚ùå L·ªói: {response.status_code} - {response.text}")
                except Exception as e:
                    st.error(f"‚ùå L·ªói upload: {e}")

    st.divider()

    # Topic Selection for filtering
    st.subheader("üéØ Ch·ªçn ph·∫°m vi t√¨m ki·∫øm")
    selected_topic = st.selectbox(
        "L·ªçc theo ch·ªß ƒë·ªÅ:",
        options=list(TOPIC_OPTIONS.keys()),
        index=0,  # Default to "T·∫•t c·∫£ ch·ªß ƒë·ªÅ"
        key="topic_selector"
    )
    st.session_state.selected_topic = selected_topic

    topic_filter = TOPIC_OPTIONS[selected_topic]
    if topic_filter:
        st.info(f"üîç S·∫Ω t√¨m ki·∫øm trong: {selected_topic}")
    else:
        st.info("üåê T√¨m ki·∫øm tr√™n t·∫•t c·∫£ ch·ªß ƒë·ªÅ")

    st.divider()

    # Advanced options
    st.subheader("‚öôÔ∏è C√†i ƒë·∫∑t n√¢ng cao")

    show_details = st.checkbox(
        "Hi·ªÉn th·ªã chi ti·∫øt retrieval",
        value=st.session_state.show_retrieval_details,
        help="Hi·ªÉn th·ªã th√¥ng tin v·ªÅ dense/BM25 retrieval v√† reranking scores"
    )
    st.session_state.show_retrieval_details = show_details

    # Data source configuration (if you still have document upload feature)
    if st.session_state.uploaded_docs:
        st.subheader("üìÑ T√†i li·ªáu ƒë√£ upload")
        data_source = st.radio(
            "Ngu·ªìn d·ªØ li·ªáu:",
            options=["RAG h·ªá th·ªëng", "T√†i li·ªáu upload", "K·∫øt h·ª£p"],
            key="data_source_radio"
        )

        if data_source == "RAG h·ªá th·ªëng":
            st.session_state.use_uploaded_files = False
        elif data_source == "T√†i li·ªáu upload":
            st.session_state.use_uploaded_files = True
        else:
            st.session_state.use_uploaded_files = True

        # Document selection (if using uploaded files)
        if st.session_state.use_uploaded_files:
            st.write("Ch·ªçn t√†i li·ªáu:")
            for doc in st.session_state.uploaded_docs:
                doc_id = doc['doc_id']
                filename = doc['filename']
                # <<< THAY ƒê·ªîI 1: L·∫•y doc_date v√† hi·ªÉn th·ªã c√πng filename >>>
                doc_date = doc.get('doc_date', 'N/A')
                display_label = f"{filename[:30]}... ({doc_date})"
                is_selected = doc_id in st.session_state.selected_docs

                if st.checkbox(display_label, value=is_selected, key=f"doc_select_{doc_id}"):
                    if doc_id not in st.session_state.selected_docs:
                        st.session_state.selected_docs.append(doc_id)
                else:
                    if doc_id in st.session_state.selected_docs:
                        st.session_state.selected_docs.remove(doc_id)

# --- MAIN CONTENT AREA ---
col1, col2 = st.columns([2, 1])

with col1:
    # Header with clear button
    header_cols = st.columns([0.8, 0.2])
    with header_cols[0]:
        st.header("üí¨ Khung Chat")
    with header_cols[1]:
        if st.button("üóëÔ∏è X√≥a", help="X√≥a to√†n b·ªô l·ªãch s·ª≠ chat"):
            st.session_state.chat_history = []
            st.rerun()

    # Display chat history
    for message in st.session_state.chat_history:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])

            if message["role"] == "assistant":
                structured_references = message.get("structured_references", [])
                structured_context = message.get("structured_context", [])

                if structured_references:
                    st.markdown("**Th√¥ng tin tham kh·∫£o**")
                    # D√πng st.container ƒë·ªÉ nh√≥m c√°c expander l·∫°i
                    with st.container(border=True):
                        for i, ref in enumerate(structured_references):
                            # L·∫•y th√¥ng tin t·ª´ ƒë·ªëi t∆∞·ª£ng tham chi·∫øu (ref)
                            doc_id = ref.get("doc_id")
                            doc_title = ref.get("doc_title")
                            formatted_date = format_date_string(ref.get("doc_date"))

                            # X√¢y d·ª±ng chu·ªói hi·ªÉn th·ªã theo t·ª´ng ph·∫ßn
                            parts = []
                            if doc_id and doc_id not in ["N/A", "website"]:
                                parts.append(f"VƒÉn b·∫£n s·ªë {doc_id}")
                            if formatted_date:
                                parts.append(f"ng√†y {formatted_date}")
                            if doc_title and doc_title not in ["N/A", "website"]:
                                parts.append(f"v/v {doc_title}")

                            # Gh√©p c√°c ph·∫ßn l·∫°i v·ªõi nhau
                            display_text = " - ".join(parts)

                            # X·ª≠ l√Ω tr∆∞·ªùng h·ª£p kh√¥ng c√≥ th√¥ng tin g√¨ ho·∫∑c l√† N/A
                            if not display_text or doc_id == "N/A":
                                display_text = "N/A (Kh√¥ng c√≥ th√¥ng tin)"

                            expander_title = f"{i+1}. {display_text}"

                            # S·ª¨A L·ªñI: S·ª≠ d·ª•ng bi·∫øn "doc_id" ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a
                            relevant_chunks = [
                                chunk for chunk in structured_context if chunk.get("doc_id") == doc_id
                            ]
                            
                            with st.expander(expander_title):
                                if relevant_chunks:
                                    st.caption(f"T√¨m th·∫•y {len(relevant_chunks)} ƒëo·∫°n context ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng t·ª´ t√†i li·ªáu n√†y:")
                                    for j, chunk in enumerate(relevant_chunks):
                                        final_prob = chunk.get('final_probability', 0.0)
                                        st.markdown(f"--- \n *ƒêo·∫°n {j+1} (ƒê·ªô li√™n quan: **{final_prob:.2%}**)*")
                                        st.text_area(
                                            label=f"Chunk Content {j+1}",
                                            value=chunk.get('text', 'N/A'),
                                            height=150,
                                            disabled=True,
                                            # S·ª¨A L·ªñI: S·ª≠ d·ª•ng "doc_id" ƒë·ªÉ t·∫°o key duy nh·∫•t
                                            key=f"chunk_{message.get('timestamp')}_{doc_id}_{j}"
                                        )
                                else:
                                    st.info("Kh√¥ng c√≥ ƒëo·∫°n context c·ª• th·ªÉ n√†o t·ª´ t√†i li·ªáu n√†y ƒë∆∞·ª£c s·ª≠ d·ª•ng trong ng·ªØ c·∫£nh cung c·∫•p cho LLM.")

                # --- KH·ªêI CODE M·ªöI: Hi·ªÉn th·ªã chi ti·∫øt retrieval n·∫øu ƒë∆∞·ª£c b·∫≠t ---
                if st.session_state.show_retrieval_details:
                    details = message.get("retrieval_details", {})
                    reranking_scores = details.get("reranking_scores", [])

                    if reranking_scores:
                        with st.expander("üîç Chi ti·∫øt Retrieval & Reranking"):
                            st.write("C√°c t√†i li·ªáu ƒë∆∞·ª£c t√¨m th·∫•y v√† ƒëi·ªÉm s·ªë cu·ªëi c√πng (top k·∫øt qu·∫£):")

                            # Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã d·∫°ng b·∫£ng
                            display_data = []
                            for item in reranking_scores:
                                # <<< THAY ƒê·ªîI 3: L·∫•y doc_date v√† hi·ªÉn th·ªã trong c·ªôt Doc ID >>>
                                doc_id = item.get('doc_id', 'N/A')[:8] # R√∫t g·ªçn ID
                                doc_date = item.get('doc_date', 'N/A')
                                display_id_with_date = f"{doc_id} ({doc_date})"
                                
                                display_data.append({
                                    "Doc ID": display_id_with_date,
                                    # "Logit": f"{item.get('final_logit', 0.0):.3f}",
                                    "ƒê·ªô li√™n quan": f"{item.get('final_probability', 0.0):.2%}",
                                    "Source": item.get('source', 'N/A'),
                                    "Preview": item.get('text_preview', '')[:150] + "..." # R√∫t g·ªçn preview
                                })

                            # Hi·ªÉn th·ªã b·∫±ng st.dataframe cho ƒë·∫πp
                            st.dataframe(display_data, use_container_width=True)

                            # Hi·ªÉn th·ªã th√™m c√°c th·ªëng k√™ kh√°c
                            stats = details.get("stats", {})
                            if stats:
                                st.write("**Th·ªëng k√™ Retrieval:**")
                                s_col1, s_col2, s_col3 = st.columns(3)
                                s_col1.metric("T·ªïng k·∫øt qu·∫£ cu·ªëi", stats.get('total_final_results', 0))
                                s_col2.metric("Dense Reranked", stats.get('dense_reranked_results', 0))
                                s_col3.metric("BM25 Top", stats.get('bm25_top_results', 0))

    # Handle assistant response generation
    if st.session_state.chat_history and st.session_state.chat_history[-1]["role"] == "user":
        with st.chat_message("assistant"):
            with st.spinner("ü§î ƒêang suy nghƒ©..."):
                try:
                    last_prompt = st.session_state.chat_history[-1]["content"]
                    response = send_chat_request(last_prompt, topic_filter)

                    if response and response.status_code == 200:
                        result = response.json()
                        bot_message = result.get("bot_message", "Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra.")
                        structured_references = result.get("structured_references", [])
                        doc_ids = result.get("doc_id", [])
                        retrieval_metrics = result.get("retrieval_metrics", "{}")
                        structured_context = result.get("structured_context", [])

                        try:
                            retrieval_details = json.loads(retrieval_metrics) if isinstance(retrieval_metrics, str) else retrieval_metrics
                        except:
                            retrieval_details = {}

                        # Create assistant message
                        assistant_message = {
                            "role": "assistant",
                            "content": bot_message,
                            "timestamp": str(time.time()),
                            "structured_references": structured_references,
                            "structured_context": structured_context,
                            "retrieval_details": retrieval_details
                        }

                    else:
                        error_msg = f"‚ùå L·ªói t·ª´ API: {response.status_code if response else 'Connection failed'}"
                        if response:
                            error_msg += f" - {response.text}"
                        assistant_message = {
                            "role": "assistant",
                            "content": error_msg,
                            "timestamp": str(time.time())
                        }

                except Exception as e:
                    error_msg = f"‚ùå L·ªói k·∫øt n·ªëi: {str(e)}"
                    assistant_message = {
                        "role": "assistant",
                        "content": error_msg,
                        "timestamp": str(time.time())
                    }

                st.session_state.chat_history.append(assistant_message)
                st.rerun()

    # Chat input
    if prompt := st.chat_input("Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n..."):
        # Add user message to history
        st.session_state.chat_history.append({
            "role": "user",
            "content": prompt,
            "timestamp": str(time.time())
        })
        st.rerun()

with col2:
    st.header("üìä Th√¥ng tin h·ªá th·ªëng")

    # Current configuration
    st.subheader("‚öôÔ∏è C·∫•u h√¨nh hi·ªán t·∫°i")
    st.write(f"**Ph·∫°m vi t√¨m ki·∫øm:** {st.session_state.selected_topic}")

    if topic_filter:
        st.success(f"üéØ L·ªçc theo: {topic_filter}")
    else:
        st.info("üåê T√¨m ki·∫øm to√†n b·ªô")

    st.write(f"**Chi ti·∫øt retrieval:** {'B·∫≠t' if st.session_state.show_retrieval_details else 'T·∫Øt'}")

    st.divider()

    # Statistics
    st.subheader("üìä Th·ªëng k√™")
    st.metric("Tin nh·∫Øn trong chat", len(st.session_state.chat_history))
    if st.session_state.uploaded_docs:
        st.metric("T√†i li·ªáu ƒë√£ upload", len(st.session_state.uploaded_docs))
        st.metric("T√†i li·ªáu ƒë∆∞·ª£c ch·ªçn", len(st.session_state.selected_docs))

    st.divider()

    # Available topics
    st.subheader("üìã Ch·ªß ƒë·ªÅ c√≥ s·∫µn")
    with st.expander("Xem t·∫•t c·∫£ ch·ªß ƒë·ªÅ"):
        for topic_name, topic_code in TOPIC_OPTIONS.items():
            if topic_code:
                st.write(f"‚Ä¢ **{topic_name}** (`{topic_code}`)")
            else:
                st.write(f"‚Ä¢ **{topic_name}** (t·∫•t c·∫£)")

    # System info
    st.subheader("üîß Th√¥ng tin h·ªá th·ªëng")
    st.write("**API Endpoint:** " + API_BASE_URL)
    st.write("**Features:**")
    st.write("‚Ä¢ Cross-topic search")
    st.write("‚Ä¢ Multi-vector retrieval")
    st.write("‚Ä¢ BM25 + Dense fusion (Partial Rerank)") # Ghi ch√∫ l·∫°i logic m·ªõi
    st.write("‚Ä¢ Reranking")

# --- FOOTER ---
st.divider()
st.caption("üöÄ VNPOST AI Assistant")